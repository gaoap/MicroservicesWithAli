#启动sentinel和OpenFeign
feign.sentinel.enabled=true
spring.cloud.openfeign.circuitbreaker.enabled=true
#如果提示FeignClientFactoryBean为NULL。打开此开关即可。懒加载
spring.cloud.openfeign.lazy-attributes-resolution=true
## Sentinel 控制台地址
spring.cloud.sentinel.transport.dashboard=localhost:8080
spring.cloud.sentinel.datasource.flow.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.flow.nacos.data-id=${spring.application.name}-sentinel-flow
spring.cloud.sentinel.datasource.flow.nacos.group-id=DEFAULT_GROUP
spring.cloud.sentinel.datasource.flow.nacos.namespace=dev
spring.cloud.sentinel.datasource.flow.nacos.data-type=json
spring.cloud.sentinel.datasource.flow.nacos.rule-type=flow
spring.cloud.sentinel.datasource.flow.nacos.username=dev
spring.cloud.sentinel.datasource.flow.nacos.password=dev
spring.cloud.sentinel.datasource.degrade.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.degrade.nacos.data-id=${spring.application.name}-sentinel-degrade
spring.cloud.sentinel.datasource.degrade.nacos.group-id=DEFAULT_GROUP
spring.cloud.sentinel.datasource.degrade.nacos.namespace=dev
spring.cloud.sentinel.datasource.degrade.nacos.data-type=json
spring.cloud.sentinel.datasource.degrade.nacos.rule-type=degrade
spring.cloud.sentinel.datasource.degrade.nacos.username=dev
spring.cloud.sentinel.datasource.degrade.nacos.password=dev
#spring.cloud.sentinel.datasource.system.nacos.server-addr=127.0.0.1:8848
#spring.cloud.sentinel.datasource.system.nacos.data-id=${spring.application.name}-sentinel-system
#spring.cloud.sentinel.datasource.system.nacos.group-id=DEFAULT_GROUP
#spring.cloud.sentinel.datasource.system.nacos.namespace=dev
#spring.cloud.sentinel.datasource.system.nacos.data-type=json
#spring.cloud.sentinel.datasource.system.nacos.rule-type=system
#spring.cloud.sentinel.datasource.system.nacos.username=dev
#spring.cloud.sentinel.datasource.system.nacos.password=dev
#spring.cloud.sentinel.datasource.authority.nacos.server-addr=127.0.0.1:8848
#spring.cloud.sentinel.datasource.authority.nacos.data-id=${spring.application.name}-sentinel-authority
#spring.cloud.sentinel.datasource.authority.nacos.group-id=DEFAULT_GROUP
#spring.cloud.sentinel.datasource.authority.nacos.namespace=dev
#spring.cloud.sentinel.datasource.authority.nacos.data-type=json
#spring.cloud.sentinel.datasource.authority.nacos.rule-type=authority
#spring.cloud.sentinel.datasource.authority.nacos.username=dev
#spring.cloud.sentinel.datasource.authority.nacos.password=dev
#spring.cloud.sentinel.datasource.param-flow.nacos.server-addr=127.0.0.1:8848
#spring.cloud.sentinel.datasource.param-flow.nacos.data-id=${spring.application.name}-sentinel-param-flow
#spring.cloud.sentinel.datasource.param-flow.nacos.group-id=DEFAULT_GROUP
#spring.cloud.sentinel.datasource.param-flow.nacos.namespace=dev
#spring.cloud.sentinel.datasource.param-flow.nacos.data-type=json
#spring.cloud.sentinel.datasource.param-flow.nacos.rule-type=degrade
#spring.cloud.sentinel.datasource.param-flow.nacos.username=dev
#spring.cloud.sentinel.datasource.param-flow.nacos.password=dev
## 取消Sentinel控制台懒加载
## 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包
## 配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
spring.cloud.sentinel.eager=true
## 如果有多套网络，又无法正确获取本机IP，则需要使用下面的参数设置当前机器可被外部访问的IP地址，供admin控制台使用
## spring.cloud.sentinel.transport.client-ip=
spring.mvc.pathmatch.matching-strategy=ant_path_matcher
server.port=0
#server.port=port: ${random.int[10000,19999]}
#spring.cloud.nacos.config.import-check.enabled=false
# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
spring.application.name=nacos-service
# Nacos认证信息
spring.cloud.nacos.discovery.username=dev
spring.cloud.nacos.discovery.password=dev
# Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
# 注册到 nacos 的指定 namespace，默认为 public
spring.cloud.nacos.discovery.namespace=dev
#集群名称配置
spring.cloud.nacos.discovery.cluster-name=BJ
#自定义标签
spring.cloud.nacos.discovery.metadata.version=gray
#nacos雪崩保护 实际测试中发现，设置为持久化实例，无论有没有触发保护阈值，都会返回包含不健康的持久化实例
#spring.cloud.nacos.discovery.ephemeral=false
#在项目开发中，可以通过设置“spring.cloud.nacos.discovery.ephemeral”来指定服务的实例类型，默认为临时实例，
#也就是默认“spring.cloud.nacos.discovery.ephemeral=true”。如果要设置持久化实例，\
#  需要设置“spring.cloud.nacos.discovery.ephemeral”设置为 false，
#服务的实例类型一旦确定之后，整个生命周期内不允许被修改，如果试图修改实例类型会提示错误
# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
# Nacos认证信息
spring.cloud.nacos.config.username=dev
spring.cloud.nacos.config.password=dev
spring.cloud.nacos.config.contextPath=/nacos
# 设置配置中心服务端地址
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
# Nacos 配置中心的namespace。需要注意，如果使用 public 的 namcespace ，请不要填写这个值，直接留空即可
spring.cloud.nacos.config.namespace=dev
spring.cloud.nacos.config.group=DEFAULT_GROUP
#spring.cloud.nacos.config.file-extension=yml
spring.cloud.nacos.config.file-extension=properties
spring.config.import=nacos:${spring.application.name}.${spring.cloud.nacos.config.file-extension}?refresh=true
#下面这些内容是为了让MyBatis映射
#指定Mybatis的Mapper文件
#mybatis.mapper-locations=classpath:mappers/*xml
##指定Mybatis的实体目录
#mybatis.type-aliases-package=com.gaoap.demo.micro.mybatis.entity

